import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.7.1'
        classpath 'org.javamodularity:moduleplugin:1.8.12'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'signing'
    id 'com.google.osdetector'           version '1.7.1'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'net.nemerosa.versioning'         version '3.0.0'
}

apply plugin: 'signing'

normalization {
    runtimeClasspath {
        ignore('/META-INF/MANIFEST.MF')
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate       = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime       = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    platform        = osdetector.os == 'osx' ? osdetector.arch == 'aarch_64' ? 'mac-aarch64' : 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os == 'linux' ? osdetector.arch == 'aarch_64' ? 'linux-aarch64' : 'linux' : osdetector.os
    ciOssrhUsername = System.getenv('OSSRH_USERNAME')
    ciOssrhPassword = System.getenv('OSSRH_PASSWORD')
    ciGHUser        = System.getenv('GH_USER')
    ciGHToken       = System.getenv('GH_TOKEN')
    gpgkey          = System.getenv("GPG_PRIVATE_KEY")
    gpgpassphrase   = System.getenv("PASSPHRASE")
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation "org.openjfx:javafx-base:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-media:${javafxVersion}:${platform}"
    implementation "org.openjfx:javafx-swing:${javafxVersion}:${platform}"
    implementation 'eu.hansolo:jdktools:17.0.27'
    implementation 'eu.hansolo:toolbox:17.0.33'
    implementation 'eu.hansolo:toolboxfx:17.0.33'
    implementation 'eu.hansolo:applefx:17.0.45'
    implementation 'com.google.code.gson:gson:2.9.0'
    //implementation 'com.dustinredmond.fxtrayicon:FXTrayIcon:4.0.1'
    implementation 'com.dustinredmond.fxtrayicon:FXTrayIcon:3.1.2'
}

application {
    mainModule = 'eu.hansolo.fx.glucostatus'
}

mainClassName = 'eu.hansolo.fx.glucostatus.Launcher'
description   = 'GlucostatusFX is a tool to visualize data coming from a nightscout server'


jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Built-By'              : System.properties['user.name'],
                'Created-By'            : System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date'            : project.buildDate,
                'Build-Time'            : project.buildTime,
                'Build-Revision'        : versioning.info.commit,
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://spdx.org/licenses/Apache-2.0.html',
                'Bundle-Description'    : description,
                'Bundle-SymbolicName'   : 'eu.hansolo.fx.glucostatus',
                'Class-Path'            : '${project.name}-${project.version}.jar',
                'Main-Class'            : 'eu.hansolo.fx.glucostatus.Launcher'
        )
    }
}


// start app from gradle
task Main(type: JavaExec) {
    mainClass = "eu.hansolo.fx.glucostatus.Launcher"
    classpath = sourceSets.main.runtimeClasspath
}


// create properties file including the version
task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir//classes/java/main/eu/hansolo/fx/glucostatus/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}


// Fix problems with loading resources
sourceSets {
    main {
        //output.setResourcesDir(java.outputDir)
        output.resourcesDir = file('build/classes/java/main')
        //java.destinationDirectory.set(file('build/classes/java/main'))
    }
}


//processResources {
//    from(sourceSets.main.java.srcDirs) {
//        include '**/*.properties'
//    }
//}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module', mainClassName
        ]
        classpath = files()
    }
}

/*
signing {
    useGpgCmd()
    sign configurations.archives
}
*/